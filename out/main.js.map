{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\n\n// bundle the js files and reference the entry points \nconst cats = {\n\t'codingCat': 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',\n\t'compilingCat': 'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif'\n  };\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconsole.log('Congratulations, your extension \"webview\" is now active!');\n\n\tlet disposable = vscode.commands.registerCommand('webview.helloWorld', () => {\n\t\tvscode.window.showInformationMessage('Hello World from WebView!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand('webview.webWorld', () => {\n\t\t\t // Create and show panel\n\t\t\tlet panel = vscode.window.createWebviewPanel(\n\t\t\t\t'webview',\n\t\t\t\t'Web View',\n\t\t\t\tvscode.ViewColumn.One,\n\t\t\t\t{\n\t\t\t\t\t// Enable scripts in the webview\n\t\t\t\t\tenableScripts: true\n\t\t\t\t}\n\t\t\t);\n\t\t\t// Get path to resource on disk\n\t\t\tconst onDiskPath = vscode.Uri.joinPath(context.extensionUri,'src','styles.css');\n\t\t\tconsole.log(onDiskPath);\n\t\t\t// And get the special URI to use with the webview\n\t\t\tconst styleSheet = panel.webview.asWebviewUri(onDiskPath);\n\n\n\t\t\tpanel.webview.html = getWebViewContent(styleSheet);\n\n\t\t\t      // Handle messages from the webview\n\t\t\tpanel.webview.onDidReceiveMessage(\n\t\t\t\tmessage => {\n\t\t\t\t\tswitch (message.command) {\n\t\t\t\t\tcase 'alert':\n\t\t\t\t\t\tvscode.window.showErrorMessage(message.text);\n\t\t\t\t\t\tconsole.log(message.text);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\tcontext.subscriptions\n\t\t\t);\n\t\t\t\n\t\t})\n\t);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\nfunction getWebViewContent(styleSheets: vscode.Uri){\n\treturn `<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t\t<link rel=\"stylesheet\" href=\"${styleSheets}\">\n\t\t<title>NiclaSense WebApp</title>   \n\t</head>\n\t<body>\n\t\t<header>\n\t\t\t<h1 id=\"main-header\">NICLA WebApp Javascript</h1>\n\t\t\t<hr>\n\t\t\t<p class=\"name\">This sample illustrates the use of the Web Bluetooth API and Web Serial APT \n\t\t\t\tto retrieve sensor information from a nearby NICLA SENSE ME which is a \n\t\t\t\tBluetooth Low Energy Device.</p>\n\t\t</header>\n\t\t\n\t\t<h3>GIT REPOSITORIES USED:</h3>\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"https://developer.chrome.com/articles/bluetooth/\">WebBluetooth API</a></li>\n\t\t\t\t<li><a href=\"https://developer.chrome.com/en/articles/serial/\">WebSerial API</a></li>\n\t\t\t</ul>\n\t\t</nav>\n\t\t<hr>\n\t\t<section>\n\t\t\t<div class=\"buttonBox\">\n\t\t\t\t<div>\n\t\t\t\t\t<button id=\"connectButton\", type=\"button\">Connect to BLE</button>\n\t\t\t\t\t<span id=\"bluetoothText\", class=\"textBox\">jlskjaklsjfkl jaslkjfklajsklfjaskjfkas</span>\n\t\t\t\t</div>  \n\t\t\t<br>\n\t\t\t<br>\n\t\t\t\t<div>\n\t\t\t\t\t<button id=\"connectButtonSerial\", type=\"button\">Connect via Serial Port</button>\n\t\t\t\t\t<span id=\"serialText\", class=\"textBox\">jlskjaklsjfkl jaslkjfklajsklfjaskjfkas</span>\n\t\t\t\t</div>\n\t\t\t</div>    \n\t\t</section>\n\n\t\t<script>\n\t\t\t(function() {\n\t\t\t\tconst vscode = acquireVsCodeApi();\n\n\t\t\t\tconst button = document.getElementById(\"connectButtonSerial\");\n\t\t\t\tbutton.addEventListener('click', event => {\n\t\t\t\t\tvscode.postMessage({\n\t\t\t\t\t\tcommand: 'alert',\n\t\t\t\t\t\ttext: 'This script has been reached'\n\t\t\t\t\t})\n\t\t\t\t\tif(navigator.serial){\n\t\t\t\t\t\tvscode.postMessage({\n\t\t\t\t\t\t\tcommand: 'alert',\n\t\t\t\t\t\t\ttext: 'WebSerialAPI is available'\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvscode.postMessage({\n\t\t\t\t\t\t\tcommand: 'alert',\n\t\t\t\t\t\t\ttext: 'No WebSerialAPI'\n\t\t\t\t\t\t})\t\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\n\t\t\t}())\t\t\n    \t</script>\n\n\t</body>\n\t</html>`;\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAQjB,SAAS,SAAS,SAAkC;AAE1D,UAAQ,IAAI,0DAA0D;AAEtE,MAAI,aAAoB,gBAAS,gBAAgB,sBAAsB,MAAM;AAC5E,IAAO,cAAO,uBAAuB,2BAA2B;AAAA,EACjE,CAAC;AAED,UAAQ,cAAc,KAAK,UAAU;AAErC,UAAQ,cAAc;AAAA,IACd,gBAAS,gBAAgB,oBAAoB,MAAM;AAEzD,UAAI,QAAe,cAAO;AAAA,QACzB;AAAA,QACA;AAAA,QACO,kBAAW;AAAA,QAClB;AAAA;AAAA,UAEC,eAAe;AAAA,QAChB;AAAA,MACD;AAEA,YAAM,aAAoB,WAAI,SAAS,QAAQ,cAAa,OAAM,YAAY;AAC9E,cAAQ,IAAI,UAAU;AAEtB,YAAM,aAAa,MAAM,QAAQ,aAAa,UAAU;AAGxD,YAAM,QAAQ,OAAO,kBAAkB,UAAU;AAGjD,YAAM,QAAQ;AAAA,QACb,aAAW;AACV,kBAAQ,QAAQ,SAAS;AAAA,YACzB,KAAK;AACJ,cAAO,cAAO,iBAAiB,QAAQ,IAAI;AAC3C,sBAAQ,IAAI,QAAQ,IAAI;AACxB;AAAA,UACD;AAAA,QACD;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,MACT;AAAA,IAED,CAAC;AAAA,EACF;AACD;AAGO,SAAS,aAAa;AAAC;AAE9B,SAAS,kBAAkB,aAAwB;AAClD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAMyB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+D5C;",
  "names": []
}
